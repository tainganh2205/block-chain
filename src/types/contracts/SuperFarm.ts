/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common'

export type InOutInfoStruct = {
  noOfClaimedLFW: BigNumberish
  noOfClaimedNFT: BigNumberish
  noOfClaimedChest: BigNumberish
  noOfClaimedBUSD: BigNumberish
  noOfcanClaimLFW: BigNumberish
  noOfcanClaimNFT: BigNumberish
  noOfcanClaimChest: BigNumberish
  noOfcanClaimBUSD: BigNumberish
  noOfDepositBUSD: BigNumberish
  noOfDepositChest: BigNumberish
  noOfDepositNFT: BigNumberish
  noOfDepositLFW: BigNumberish
}

export type InOutInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  noOfClaimedLFW: BigNumber
  noOfClaimedNFT: BigNumber
  noOfClaimedChest: BigNumber
  noOfClaimedBUSD: BigNumber
  noOfcanClaimLFW: BigNumber
  noOfcanClaimNFT: BigNumber
  noOfcanClaimChest: BigNumber
  noOfcanClaimBUSD: BigNumber
  noOfDepositBUSD: BigNumber
  noOfDepositChest: BigNumber
  noOfDepositNFT: BigNumber
  noOfDepositLFW: BigNumber
}

export type StakingInfoStruct = {
  lastStakingBlock: BigNumberish
  claimLFWStatus: BigNumberish
  claimNFTStatus: BigNumberish
}

export type StakingInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
  lastStakingBlock: BigNumber
  claimLFWStatus: BigNumber
  claimNFTStatus: BigNumber
}

export interface SuperFarmInterface extends ethers.utils.Interface {
  functions: {
    'LFW_CASTLE_FACTORY()': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'bonusEndBlock()': FunctionFragment
    'claimLFW()': FunctionFragment
    'claimNFT(address)': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'depositBUSD(uint256)': FunctionFragment
    'depositChest(address,uint256[],uint256[])': FunctionFragment
    'depositLFW(uint256)': FunctionFragment
    'depositLegendNFT(address,uint256)': FunctionFragment
    'emergencyChestWithdraw(address,uint256[],uint256[])': FunctionFragment
    'emergencyNFTWithdraw(address,uint256)': FunctionFragment
    'emergencyRemoval(uint256)': FunctionFragment
    'emergencyRewardWithdraw(uint256)': FunctionFragment
    'getClaimStatusLFW(address)': FunctionFragment
    'getClaimStatusNFT(address)': FunctionFragment
    'getCurrentBlock()': FunctionFragment
    'getRemainingSlot()': FunctionFragment
    'getRemainingSlotForUser(address)': FunctionFragment
    'getStakingEndBlock()': FunctionFragment
    'getStakingStartBlock()': FunctionFragment
    'getTotalLockedBUSD()': FunctionFragment
    'getTotalLockedChest(address)': FunctionFragment
    'getTotalLockedLFW()': FunctionFragment
    'getTotalLockedLegendNFT()': FunctionFragment
    'getUserAmountDepositBUSD(address)': FunctionFragment
    'getUserAmountDepositChest(address)': FunctionFragment
    'getUserAmountDepositLFW(address)': FunctionFragment
    'getUserAmountDepositNFT(address)': FunctionFragment
    'getUserNumberOfClaimRemaining(address)': FunctionFragment
    'getUserRemainingBlockForReward(address)': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(address,address[],uint256[],uint256[],uint256,bool,address)': FunctionFragment
    'isInitialized()': FunctionFragment
    'isLegend(address,uint256)': FunctionFragment
    'lastRewardBlock()': FunctionFragment
    'name()': FunctionFragment
    'numberSlotBUSD()': FunctionFragment
    'numberSlotChest()': FunctionFragment
    'numberSlotLFW()': FunctionFragment
    'numberSlotNFT()': FunctionFragment
    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)': FunctionFragment
    'onERC1155Received(address,address,uint256,uint256,bytes)': FunctionFragment
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment
    'owner()': FunctionFragment
    'ownerStakeWithdraw(uint256)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'rewardTokens(uint256)': FunctionFragment
    'setLegend(uint256[],bool,address)': FunctionFragment
    'setLegendBulk(bool,uint256,uint256,address)': FunctionFragment
    'stakedToken()': FunctionFragment
    'stakingBlock()': FunctionFragment
    'stakingEndBlock()': FunctionFragment
    'startBlock()': FunctionFragment
    'stopReward()': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unStakingBlock()': FunctionFragment
    'updateStakingBlocks(uint256,uint256)': FunctionFragment
    'updateStartAndEndBlocks(uint256,uint256)': FunctionFragment
    'userInfo(address)': FunctionFragment
    'userList(uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'LFW_CASTLE_FACTORY',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string],
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'bonusEndBlock',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'claimLFW', values?: undefined): string
  encodeFunctionData(functionFragment: 'claimNFT', values: [string]): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'depositBUSD',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'depositChest',
    values: [string, BigNumberish[], BigNumberish[]],
  ): string
  encodeFunctionData(
    functionFragment: 'depositLFW',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'depositLegendNFT',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyChestWithdraw',
    values: [string, BigNumberish[], BigNumberish[]],
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyNFTWithdraw',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyRemoval',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyRewardWithdraw',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getClaimStatusLFW',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'getClaimStatusNFT',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentBlock',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getRemainingSlot',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getRemainingSlotForUser',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'getStakingEndBlock',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getStakingStartBlock',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getTotalLockedBUSD',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getTotalLockedChest',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'getTotalLockedLFW',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getTotalLockedLegendNFT',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getUserAmountDepositBUSD',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'getUserAmountDepositChest',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'getUserAmountDepositLFW',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'getUserAmountDepositNFT',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'getUserNumberOfClaimRemaining',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'getUserRemainingBlockForReward',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      boolean,
      string,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'isInitialized',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'isLegend',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'lastRewardBlock',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'numberSlotBUSD',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'numberSlotChest',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'numberSlotLFW',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'numberSlotNFT',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'onERC1155BatchReceived',
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'onERC1155Received',
    values: [string, string, BigNumberish, BigNumberish, BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [string, string, BigNumberish, BytesLike],
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'ownerStakeWithdraw',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'rewardTokens',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'setLegend',
    values: [BigNumberish[], boolean, string],
  ): string
  encodeFunctionData(
    functionFragment: 'setLegendBulk',
    values: [boolean, BigNumberish, BigNumberish, string],
  ): string
  encodeFunctionData(
    functionFragment: 'stakedToken',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'stakingBlock',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'stakingEndBlock',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'startBlock', values?: undefined): string
  encodeFunctionData(functionFragment: 'stopReward', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'unStakingBlock',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'updateStakingBlocks',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'updateStartAndEndBlocks',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'userInfo', values: [string]): string
  encodeFunctionData(
    functionFragment: 'userList',
    values: [BigNumberish],
  ): string

  decodeFunctionResult(
    functionFragment: 'LFW_CASTLE_FACTORY',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'bonusEndBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'claimLFW', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'depositBUSD', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'depositChest',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'depositLFW', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'depositLegendNFT',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyChestWithdraw',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyNFTWithdraw',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyRemoval',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyRewardWithdraw',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getClaimStatusLFW',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getClaimStatusNFT',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCurrentBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRemainingSlot',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRemainingSlotForUser',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStakingEndBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStakingStartBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTotalLockedBUSD',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTotalLockedChest',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTotalLockedLFW',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTotalLockedLegendNFT',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUserAmountDepositBUSD',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUserAmountDepositChest',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUserAmountDepositLFW',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUserAmountDepositNFT',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUserNumberOfClaimRemaining',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUserRemainingBlockForReward',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isInitialized',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'isLegend', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastRewardBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'numberSlotBUSD',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'numberSlotChest',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'numberSlotLFW',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'numberSlotNFT',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'onERC1155BatchReceived',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'onERC1155Received',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'onERC721Received',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'ownerStakeWithdraw',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'rewardTokens',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'setLegend', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setLegendBulk',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'stakedToken', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'stakingBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'stakingEndBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'startBlock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stopReward', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'unStakingBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateStakingBlocks',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateStartAndEndBlocks',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'userList', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'ClaimLegendNFT(address,address,uint256)': EventFragment
    'DepositBUSD(address,uint256)': EventFragment
    'DepositChest(address,address,uint256,uint256)': EventFragment
    'DepositLFW(address,uint256)': EventFragment
    'DepositLegendNFT(address,address,uint256)': EventFragment
    'NewNftLegendTokenIds(uint256[])': EventFragment
    'NewNftTokenIds(uint256[])': EventFragment
    'NewPoolCap(uint256)': EventFragment
    'NewPoolLimit(uint256)': EventFragment
    'NewRewardToken(address)': EventFragment
    'NewStakingBlocks(uint256,uint256)': EventFragment
    'NewStartAndEndBlocks(uint256,uint256)': EventFragment
    'NewUnStakingBlock(uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'RemoveRewardToken(address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Withdraw(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ClaimLegendNFT'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositBUSD'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositChest'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositLFW'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositLegendNFT'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewNftLegendTokenIds'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewNftTokenIds'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewPoolCap'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewPoolLimit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewRewardToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewStakingBlocks'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewStartAndEndBlocks'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewUnStakingBlock'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RemoveRewardToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export type ClaimLegendNFTEvent = TypedEvent<
  [string, string, BigNumber],
  { user: string; nftAddress: string; tokenId: BigNumber }
>

export type ClaimLegendNFTEventFilter = TypedEventFilter<ClaimLegendNFTEvent>

export type DepositBUSDEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>

export type DepositBUSDEventFilter = TypedEventFilter<DepositBUSDEvent>

export type DepositChestEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { owner: string; nftAddress: string; tokenId: BigNumber; amount: BigNumber }
>

export type DepositChestEventFilter = TypedEventFilter<DepositChestEvent>

export type DepositLFWEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>

export type DepositLFWEventFilter = TypedEventFilter<DepositLFWEvent>

export type DepositLegendNFTEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; nftAddress: string; tokenId: BigNumber }
>

export type DepositLegendNFTEventFilter =
  TypedEventFilter<DepositLegendNFTEvent>

export type NewNftLegendTokenIdsEvent = TypedEvent<
  [BigNumber[]],
  { nftIds: BigNumber[] }
>

export type NewNftLegendTokenIdsEventFilter =
  TypedEventFilter<NewNftLegendTokenIdsEvent>

export type NewNftTokenIdsEvent = TypedEvent<
  [BigNumber[]],
  { nftIds: BigNumber[] }
>

export type NewNftTokenIdsEventFilter = TypedEventFilter<NewNftTokenIdsEvent>

export type NewPoolCapEvent = TypedEvent<[BigNumber], { poolCap: BigNumber }>

export type NewPoolCapEventFilter = TypedEventFilter<NewPoolCapEvent>

export type NewPoolLimitEvent = TypedEvent<
  [BigNumber],
  { poolLimitPerUser: BigNumber }
>

export type NewPoolLimitEventFilter = TypedEventFilter<NewPoolLimitEvent>

export type NewRewardTokenEvent = TypedEvent<[string], { token: string }>

export type NewRewardTokenEventFilter = TypedEventFilter<NewRewardTokenEvent>

export type NewStakingBlocksEvent = TypedEvent<
  [BigNumber, BigNumber],
  { startStakingBlock: BigNumber; endStakingBlock: BigNumber }
>

export type NewStakingBlocksEventFilter =
  TypedEventFilter<NewStakingBlocksEvent>

export type NewStartAndEndBlocksEvent = TypedEvent<
  [BigNumber, BigNumber],
  { startBlock: BigNumber; endBlock: BigNumber }
>

export type NewStartAndEndBlocksEventFilter =
  TypedEventFilter<NewStartAndEndBlocksEvent>

export type NewUnStakingBlockEvent = TypedEvent<
  [BigNumber],
  { startUnStakingBlock: BigNumber }
>

export type NewUnStakingBlockEventFilter =
  TypedEventFilter<NewUnStakingBlockEvent>

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export type RemoveRewardTokenEvent = TypedEvent<[string], { token: string }>

export type RemoveRewardTokenEventFilter =
  TypedEventFilter<RemoveRewardTokenEvent>

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export type WithdrawEvent = TypedEvent<[string], { user: string }>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface SuperFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SuperFarmInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    LFW_CASTLE_FACTORY(overrides?: CallOverrides): Promise<[string]>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    bonusEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    claimLFW(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    claimNFT(
      nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    depositBUSD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    depositChest(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    depositLFW(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    depositLegendNFT(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    emergencyChestWithdraw(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    emergencyNFTWithdraw(
      nftAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    emergencyRemoval(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    getClaimStatusLFW(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getClaimStatusNFT(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getCurrentBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    getRemainingSlot(overrides?: CallOverrides): Promise<[BigNumber]>

    getRemainingSlotForUser(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getStakingEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    getStakingStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    getTotalLockedBUSD(overrides?: CallOverrides): Promise<[BigNumber]>

    getTotalLockedChest(
      nftAddress: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getTotalLockedLFW(overrides?: CallOverrides): Promise<[BigNumber]>

    getTotalLockedLegendNFT(overrides?: CallOverrides): Promise<[BigNumber]>

    getUserAmountDepositBUSD(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getUserAmountDepositChest(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getUserAmountDepositLFW(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getUserAmountDepositNFT(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getUserNumberOfClaimRemaining(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getUserRemainingBlockForReward(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    initialize(
      _stakedToken: string,
      _rewardTokens: string[],
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>

    isLegend(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    lastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    name(overrides?: CallOverrides): Promise<[string]>

    numberSlotBUSD(overrides?: CallOverrides): Promise<[BigNumber]>

    numberSlotChest(overrides?: CallOverrides): Promise<[BigNumber]>

    numberSlotLFW(overrides?: CallOverrides): Promise<[BigNumber]>

    numberSlotNFT(overrides?: CallOverrides): Promise<[BigNumber]>

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    ownerStakeWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>

    setLegend(
      _heroes: BigNumberish[],
      _isLegend: boolean,
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setLegendBulk(
      _isLegend: boolean,
      _startId: BigNumberish,
      _endId: BigNumberish,
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    stakedToken(overrides?: CallOverrides): Promise<[string]>

    stakingBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    stakingEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    stopReward(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    unStakingBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    updateStakingBlocks(
      _startStakingBlock: BigNumberish,
      _endStakingBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        InOutInfoStructOutput,
        StakingInfoStructOutput,
        BigNumber,
      ] & {
        amountBUSD: BigNumber
        amountChest: BigNumber
        amountLFW: BigNumber
        amountNFT: BigNumber
        inOutInfo_: InOutInfoStructOutput
        stakingInfo_: StakingInfoStructOutput
        nftLegendIds: BigNumber
      }
    >

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>
  }

  LFW_CASTLE_FACTORY(overrides?: CallOverrides): Promise<string>

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>

  claimLFW(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  claimNFT(
    nftAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  depositBUSD(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  depositChest(
    nftAddress: string,
    tokenId: BigNumberish[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  depositLFW(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  depositLegendNFT(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  emergencyChestWithdraw(
    nftAddress: string,
    tokenId: BigNumberish[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  emergencyNFTWithdraw(
    nftAddress: string,
    nftTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  emergencyRemoval(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  emergencyRewardWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  getClaimStatusLFW(_usr: string, overrides?: CallOverrides): Promise<BigNumber>

  getClaimStatusNFT(_usr: string, overrides?: CallOverrides): Promise<BigNumber>

  getCurrentBlock(overrides?: CallOverrides): Promise<BigNumber>

  getRemainingSlot(overrides?: CallOverrides): Promise<BigNumber>

  getRemainingSlotForUser(
    _usr: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getStakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>

  getStakingStartBlock(overrides?: CallOverrides): Promise<BigNumber>

  getTotalLockedBUSD(overrides?: CallOverrides): Promise<BigNumber>

  getTotalLockedChest(
    nftAddress: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getTotalLockedLFW(overrides?: CallOverrides): Promise<BigNumber>

  getTotalLockedLegendNFT(overrides?: CallOverrides): Promise<BigNumber>

  getUserAmountDepositBUSD(
    _usr: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getUserAmountDepositChest(
    _usr: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getUserAmountDepositLFW(
    _usr: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getUserAmountDepositNFT(
    _usr: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getUserNumberOfClaimRemaining(
    _usr: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getUserRemainingBlockForReward(
    _usr: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  initialize(
    _stakedToken: string,
    _rewardTokens: string[],
    _startEndBlocks: BigNumberish[],
    _stakingBlocks: BigNumberish[],
    _unStakingBlock: BigNumberish,
    _isRemovable: boolean,
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  isInitialized(overrides?: CallOverrides): Promise<boolean>

  isLegend(
    _nftAddress: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>

  name(overrides?: CallOverrides): Promise<string>

  numberSlotBUSD(overrides?: CallOverrides): Promise<BigNumber>

  numberSlotChest(overrides?: CallOverrides): Promise<BigNumber>

  numberSlotLFW(overrides?: CallOverrides): Promise<BigNumber>

  numberSlotNFT(overrides?: CallOverrides): Promise<BigNumber>

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  ownerStakeWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  setLegend(
    _heroes: BigNumberish[],
    _isLegend: boolean,
    _nftAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setLegendBulk(
    _isLegend: boolean,
    _startId: BigNumberish,
    _endId: BigNumberish,
    _nftAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  stakedToken(overrides?: CallOverrides): Promise<string>

  stakingBlock(overrides?: CallOverrides): Promise<BigNumber>

  stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>

  startBlock(overrides?: CallOverrides): Promise<BigNumber>

  stopReward(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  unStakingBlock(overrides?: CallOverrides): Promise<BigNumber>

  updateStakingBlocks(
    _startStakingBlock: BigNumberish,
    _endStakingBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  updateStartAndEndBlocks(
    _startBlock: BigNumberish,
    _bonusEndBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  userInfo(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      InOutInfoStructOutput,
      StakingInfoStructOutput,
      BigNumber,
    ] & {
      amountBUSD: BigNumber
      amountChest: BigNumber
      amountLFW: BigNumber
      amountNFT: BigNumber
      inOutInfo_: InOutInfoStructOutput
      stakingInfo_: StakingInfoStructOutput
      nftLegendIds: BigNumber
    }
  >

  userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  callStatic: {
    LFW_CASTLE_FACTORY(overrides?: CallOverrides): Promise<string>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>

    claimLFW(overrides?: CallOverrides): Promise<void>

    claimNFT(nftAddress: string, overrides?: CallOverrides): Promise<void>

    decimals(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    depositBUSD(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    depositChest(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>

    depositLFW(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    depositLegendNFT(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    emergencyChestWithdraw(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>

    emergencyNFTWithdraw(
      nftAddress: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    emergencyRemoval(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    getClaimStatusLFW(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getClaimStatusNFT(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getCurrentBlock(overrides?: CallOverrides): Promise<BigNumber>

    getRemainingSlot(overrides?: CallOverrides): Promise<BigNumber>

    getRemainingSlotForUser(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>

    getStakingStartBlock(overrides?: CallOverrides): Promise<BigNumber>

    getTotalLockedBUSD(overrides?: CallOverrides): Promise<BigNumber>

    getTotalLockedChest(
      nftAddress: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getTotalLockedLFW(overrides?: CallOverrides): Promise<BigNumber>

    getTotalLockedLegendNFT(overrides?: CallOverrides): Promise<BigNumber>

    getUserAmountDepositBUSD(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserAmountDepositChest(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserAmountDepositLFW(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserAmountDepositNFT(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserNumberOfClaimRemaining(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserRemainingBlockForReward(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    initialize(
      _stakedToken: string,
      _rewardTokens: string[],
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: CallOverrides,
    ): Promise<void>

    isInitialized(overrides?: CallOverrides): Promise<boolean>

    isLegend(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<string>

    numberSlotBUSD(overrides?: CallOverrides): Promise<BigNumber>

    numberSlotChest(overrides?: CallOverrides): Promise<BigNumber>

    numberSlotLFW(overrides?: CallOverrides): Promise<BigNumber>

    numberSlotNFT(overrides?: CallOverrides): Promise<BigNumber>

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    ownerStakeWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    setLegend(
      _heroes: BigNumberish[],
      _isLegend: boolean,
      _nftAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>

    setLegendBulk(
      _isLegend: boolean,
      _startId: BigNumberish,
      _endId: BigNumberish,
      _nftAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>

    stakedToken(overrides?: CallOverrides): Promise<string>

    stakingBlock(overrides?: CallOverrides): Promise<BigNumber>

    stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>

    startBlock(overrides?: CallOverrides): Promise<BigNumber>

    stopReward(overrides?: CallOverrides): Promise<void>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>

    unStakingBlock(overrides?: CallOverrides): Promise<BigNumber>

    updateStakingBlocks(
      _startStakingBlock: BigNumberish,
      _endStakingBlock: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        InOutInfoStructOutput,
        StakingInfoStructOutput,
        BigNumber,
      ] & {
        amountBUSD: BigNumber
        amountChest: BigNumber
        amountLFW: BigNumber
        amountNFT: BigNumber
        inOutInfo_: InOutInfoStructOutput
        stakingInfo_: StakingInfoStructOutput
        nftLegendIds: BigNumber
      }
    >

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter

    'ClaimLegendNFT(address,address,uint256)'(
      user?: string | null,
      nftAddress?: string | null,
      tokenId?: null,
    ): ClaimLegendNFTEventFilter
    ClaimLegendNFT(
      user?: string | null,
      nftAddress?: string | null,
      tokenId?: null,
    ): ClaimLegendNFTEventFilter

    'DepositBUSD(address,uint256)'(
      user?: string | null,
      amount?: null,
    ): DepositBUSDEventFilter
    DepositBUSD(user?: string | null, amount?: null): DepositBUSDEventFilter

    'DepositChest(address,address,uint256,uint256)'(
      owner?: string | null,
      nftAddress?: string | null,
      tokenId?: null,
      amount?: null,
    ): DepositChestEventFilter
    DepositChest(
      owner?: string | null,
      nftAddress?: string | null,
      tokenId?: null,
      amount?: null,
    ): DepositChestEventFilter

    'DepositLFW(address,uint256)'(
      user?: string | null,
      amount?: null,
    ): DepositLFWEventFilter
    DepositLFW(user?: string | null, amount?: null): DepositLFWEventFilter

    'DepositLegendNFT(address,address,uint256)'(
      owner?: string | null,
      nftAddress?: string | null,
      tokenId?: null,
    ): DepositLegendNFTEventFilter
    DepositLegendNFT(
      owner?: string | null,
      nftAddress?: string | null,
      tokenId?: null,
    ): DepositLegendNFTEventFilter

    'NewNftLegendTokenIds(uint256[])'(
      nftIds?: null,
    ): NewNftLegendTokenIdsEventFilter
    NewNftLegendTokenIds(nftIds?: null): NewNftLegendTokenIdsEventFilter

    'NewNftTokenIds(uint256[])'(nftIds?: null): NewNftTokenIdsEventFilter
    NewNftTokenIds(nftIds?: null): NewNftTokenIdsEventFilter

    'NewPoolCap(uint256)'(poolCap?: null): NewPoolCapEventFilter
    NewPoolCap(poolCap?: null): NewPoolCapEventFilter

    'NewPoolLimit(uint256)'(poolLimitPerUser?: null): NewPoolLimitEventFilter
    NewPoolLimit(poolLimitPerUser?: null): NewPoolLimitEventFilter

    'NewRewardToken(address)'(token?: null): NewRewardTokenEventFilter
    NewRewardToken(token?: null): NewRewardTokenEventFilter

    'NewStakingBlocks(uint256,uint256)'(
      startStakingBlock?: null,
      endStakingBlock?: null,
    ): NewStakingBlocksEventFilter
    NewStakingBlocks(
      startStakingBlock?: null,
      endStakingBlock?: null,
    ): NewStakingBlocksEventFilter

    'NewStartAndEndBlocks(uint256,uint256)'(
      startBlock?: null,
      endBlock?: null,
    ): NewStartAndEndBlocksEventFilter
    NewStartAndEndBlocks(
      startBlock?: null,
      endBlock?: null,
    ): NewStartAndEndBlocksEventFilter

    'NewUnStakingBlock(uint256)'(
      startUnStakingBlock?: null,
    ): NewUnStakingBlockEventFilter
    NewUnStakingBlock(startUnStakingBlock?: null): NewUnStakingBlockEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter

    'RemoveRewardToken(address)'(token?: null): RemoveRewardTokenEventFilter
    RemoveRewardToken(token?: null): RemoveRewardTokenEventFilter

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter

    'Withdraw(address)'(user?: string | null): WithdrawEventFilter
    Withdraw(user?: string | null): WithdrawEventFilter
  }

  estimateGas: {
    LFW_CASTLE_FACTORY(overrides?: CallOverrides): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>

    claimLFW(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    claimNFT(
      nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    depositBUSD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    depositChest(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    depositLFW(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    depositLegendNFT(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    emergencyChestWithdraw(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    emergencyNFTWithdraw(
      nftAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    emergencyRemoval(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    getClaimStatusLFW(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getClaimStatusNFT(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getCurrentBlock(overrides?: CallOverrides): Promise<BigNumber>

    getRemainingSlot(overrides?: CallOverrides): Promise<BigNumber>

    getRemainingSlotForUser(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>

    getStakingStartBlock(overrides?: CallOverrides): Promise<BigNumber>

    getTotalLockedBUSD(overrides?: CallOverrides): Promise<BigNumber>

    getTotalLockedChest(
      nftAddress: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getTotalLockedLFW(overrides?: CallOverrides): Promise<BigNumber>

    getTotalLockedLegendNFT(overrides?: CallOverrides): Promise<BigNumber>

    getUserAmountDepositBUSD(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserAmountDepositChest(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserAmountDepositLFW(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserAmountDepositNFT(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserNumberOfClaimRemaining(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserRemainingBlockForReward(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    initialize(
      _stakedToken: string,
      _rewardTokens: string[],
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>

    isLegend(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    numberSlotBUSD(overrides?: CallOverrides): Promise<BigNumber>

    numberSlotChest(overrides?: CallOverrides): Promise<BigNumber>

    numberSlotLFW(overrides?: CallOverrides): Promise<BigNumber>

    numberSlotNFT(overrides?: CallOverrides): Promise<BigNumber>

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    ownerStakeWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    setLegend(
      _heroes: BigNumberish[],
      _isLegend: boolean,
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setLegendBulk(
      _isLegend: boolean,
      _startId: BigNumberish,
      _endId: BigNumberish,
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    stakedToken(overrides?: CallOverrides): Promise<BigNumber>

    stakingBlock(overrides?: CallOverrides): Promise<BigNumber>

    stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>

    startBlock(overrides?: CallOverrides): Promise<BigNumber>

    stopReward(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    unStakingBlock(overrides?: CallOverrides): Promise<BigNumber>

    updateStakingBlocks(
      _startStakingBlock: BigNumberish,
      _endStakingBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    LFW_CASTLE_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    bonusEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    claimLFW(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    claimNFT(
      nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    depositBUSD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    depositChest(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    depositLFW(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    depositLegendNFT(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    emergencyChestWithdraw(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    emergencyNFTWithdraw(
      nftAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    emergencyRemoval(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    getClaimStatusLFW(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getClaimStatusNFT(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getCurrentBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRemainingSlot(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRemainingSlotForUser(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getStakingEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getStakingStartBlock(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getTotalLockedBUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getTotalLockedChest(
      nftAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getTotalLockedLFW(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getTotalLockedLegendNFT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUserAmountDepositBUSD(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUserAmountDepositChest(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUserAmountDepositLFW(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUserAmountDepositNFT(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUserNumberOfClaimRemaining(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUserRemainingBlockForReward(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    initialize(
      _stakedToken: string,
      _rewardTokens: string[],
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isLegend(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    numberSlotBUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>

    numberSlotChest(overrides?: CallOverrides): Promise<PopulatedTransaction>

    numberSlotLFW(overrides?: CallOverrides): Promise<PopulatedTransaction>

    numberSlotNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerStakeWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    setLegend(
      _heroes: BigNumberish[],
      _isLegend: boolean,
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setLegendBulk(
      _isLegend: boolean,
      _startId: BigNumberish,
      _endId: BigNumberish,
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    stakedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stakingBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stakingEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stopReward(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    unStakingBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    updateStakingBlocks(
      _startStakingBlock: BigNumberish,
      _endStakingBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    userList(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
