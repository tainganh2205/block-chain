/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common'

export interface ChestLFWInterface extends ethers.utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'OPERATOR_ROLE()': FunctionFragment
    'balanceOf(address,uint256)': FunctionFragment
    'balanceOfBatch(address[],uint256[])': FunctionFragment
    'burnBatchItem(uint256[],uint256[])': FunctionFragment
    'burnItem(uint256,uint256)': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'getRoleMember(bytes32,uint256)': FunctionFragment
    'getRoleMemberCount(bytes32)': FunctionFragment
    'grantContractRole(string,address)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'initialize()': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'lockChest()': FunctionFragment
    'mintItem(address,uint256,uint256)': FunctionFragment
    'mintItems(address,uint256[],uint256[],bytes)': FunctionFragment
    'openChest(uint256,uint256)': FunctionFragment
    'openChestFee()': FunctionFragment
    'openChestId()': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeContractRole(string,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment
    'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'setBaseUri(string)': FunctionFragment
    'setLockChest(bool)': FunctionFragment
    'setTreasury(address)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'treasury()': FunctionFragment
    'updateOpenChestFee(uint256)': FunctionFragment
    'uri(uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'OPERATOR_ROLE',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOfBatch',
    values: [string[], BigNumberish[]],
  ): string
  encodeFunctionData(
    functionFragment: 'burnBatchItem',
    values: [BigNumberish[], BigNumberish[]],
  ): string
  encodeFunctionData(
    functionFragment: 'burnItem',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [BytesLike, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleMemberCount',
    values: [BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'grantContractRole',
    values: [string, string],
  ): string
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string],
  ): string
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string],
  ): string
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [string, string],
  ): string
  encodeFunctionData(functionFragment: 'lockChest', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'mintItem',
    values: [string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'mintItems',
    values: [string, BigNumberish[], BigNumberish[], BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'openChest',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'openChestFee',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'openChestId',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string],
  ): string
  encodeFunctionData(
    functionFragment: 'revokeContractRole',
    values: [string, string],
  ): string
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string],
  ): string
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [string, string, BigNumberish, BigNumberish, BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [string, boolean],
  ): string
  encodeFunctionData(functionFragment: 'setBaseUri', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setLockChest',
    values: [boolean],
  ): string
  encodeFunctionData(functionFragment: 'setTreasury', values: [string]): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'updateOpenChestFee',
    values: [BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'uri', values: [BigNumberish]): string

  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'OPERATOR_ROLE',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'balanceOfBatch',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'burnBatchItem',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'burnItem', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleMember',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleMemberCount',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'grantContractRole',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'lockChest', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mintItem', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mintItems', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'openChest', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'openChestFee',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'openChestId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'revokeContractRole',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'safeBatchTransferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'setBaseUri', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setLockChest',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'updateOpenChestFee',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result

  events: {
    'ApprovalForAll(address,address,bool)': EventFragment
    'ItemBurn(address,uint256,uint256)': EventFragment
    'ItemBurnBatch(address,uint256[],uint256[])': EventFragment
    'ItemMint(address,uint256,uint256)': EventFragment
    'ItemMintBatch(address,uint256[],uint256[])': EventFragment
    'OpenTreasuryChest(uint256,address,uint256,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment
    'TransferSingle(address,address,address,uint256,uint256)': EventFragment
    'URI(string,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ItemBurn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ItemBurnBatch'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ItemMint'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ItemMintBatch'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OpenTreasuryChest'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'URI'): EventFragment
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { account: string; operator: string; approved: boolean }
>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export type ItemBurnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { minter: string; token_id: BigNumber; amount: BigNumber }
>

export type ItemBurnEventFilter = TypedEventFilter<ItemBurnEvent>

export type ItemBurnBatchEvent = TypedEvent<
  [string, BigNumber[], BigNumber[]],
  { minter: string; token_id: BigNumber[]; amount: BigNumber[] }
>

export type ItemBurnBatchEventFilter = TypedEventFilter<ItemBurnBatchEvent>

export type ItemMintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { minter: string; token_id: BigNumber; amount: BigNumber }
>

export type ItemMintEventFilter = TypedEventFilter<ItemMintEvent>

export type ItemMintBatchEvent = TypedEvent<
  [string, BigNumber[], BigNumber[]],
  { minter: string; token_id: BigNumber[]; amount: BigNumber[] }
>

export type ItemMintBatchEventFilter = TypedEventFilter<ItemMintBatchEvent>

export type OpenTreasuryChestEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    chest_id: BigNumber
    minter: string
    token_id: BigNumber
    amount: BigNumber
  }
>

export type OpenTreasuryChestEventFilter =
  TypedEventFilter<OpenTreasuryChestEvent>

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  {
    operator: string
    from: string
    to: string
    ids: BigNumber[]
    values: BigNumber[]
  }
>

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    operator: string
    from: string
    to: string
    id: BigNumber
    value: BigNumber
  }
>

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>

export type URIEvent = TypedEvent<
  [string, BigNumber],
  { value: string; id: BigNumber }
>

export type URIEventFilter = TypedEventFilter<URIEvent>

export interface ChestLFW extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ChestLFWInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>

    burnBatchItem(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    burnItem(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    grantContractRole(
      _role: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    lockChest(overrides?: CallOverrides): Promise<[boolean]>

    mintItem(
      _minter: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    mintItems(
      _minter: string,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    openChest(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    openChestFee(overrides?: CallOverrides): Promise<[BigNumber]>

    openChestId(overrides?: CallOverrides): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    revokeContractRole(
      _role: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setBaseUri(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setLockChest(
      _lockChest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    treasury(overrides?: CallOverrides): Promise<[string]>

    updateOpenChestFee(
      _baseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>

  burnBatchItem(
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  burnItem(
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  grantContractRole(
    _role: string,
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides,
  ): Promise<boolean>

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides,
  ): Promise<boolean>

  lockChest(overrides?: CallOverrides): Promise<boolean>

  mintItem(
    _minter: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  mintItems(
    _minter: string,
    _tokenIds: BigNumberish[],
    _amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  openChest(
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  openChestFee(overrides?: CallOverrides): Promise<BigNumber>

  openChestId(overrides?: CallOverrides): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  revokeContractRole(
    _role: string,
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setBaseUri(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setLockChest(
    _lockChest: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  treasury(overrides?: CallOverrides): Promise<string>

  updateOpenChestFee(
    _baseFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>

    burnBatchItem(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>

    burnItem(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    grantContractRole(
      _role: string,
      _wallet: string,
      overrides?: CallOverrides,
    ): Promise<void>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<boolean>

    initialize(overrides?: CallOverrides): Promise<void>

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<boolean>

    lockChest(overrides?: CallOverrides): Promise<boolean>

    mintItem(
      _minter: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    mintItems(
      _minter: string,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>

    openChest(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    openChestFee(overrides?: CallOverrides): Promise<BigNumber>

    openChestId(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>

    revokeContractRole(
      _role: string,
      _wallet: string,
      overrides?: CallOverrides,
    ): Promise<void>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides,
    ): Promise<void>

    setBaseUri(uri: string, overrides?: CallOverrides): Promise<void>

    setLockChest(_lockChest: boolean, overrides?: CallOverrides): Promise<void>

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>

    treasury(overrides?: CallOverrides): Promise<string>

    updateOpenChestFee(
      _baseFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'ApprovalForAll(address,address,bool)'(
      account?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter

    'ItemBurn(address,uint256,uint256)'(
      minter?: null,
      token_id?: null,
      amount?: null,
    ): ItemBurnEventFilter
    ItemBurn(minter?: null, token_id?: null, amount?: null): ItemBurnEventFilter

    'ItemBurnBatch(address,uint256[],uint256[])'(
      minter?: null,
      token_id?: null,
      amount?: null,
    ): ItemBurnBatchEventFilter
    ItemBurnBatch(
      minter?: null,
      token_id?: null,
      amount?: null,
    ): ItemBurnBatchEventFilter

    'ItemMint(address,uint256,uint256)'(
      minter?: null,
      token_id?: null,
      amount?: null,
    ): ItemMintEventFilter
    ItemMint(minter?: null, token_id?: null, amount?: null): ItemMintEventFilter

    'ItemMintBatch(address,uint256[],uint256[])'(
      minter?: null,
      token_id?: null,
      amount?: null,
    ): ItemMintBatchEventFilter
    ItemMintBatch(
      minter?: null,
      token_id?: null,
      amount?: null,
    ): ItemMintBatchEventFilter

    'OpenTreasuryChest(uint256,address,uint256,uint256)'(
      chest_id?: null,
      minter?: null,
      token_id?: null,
      amount?: null,
    ): OpenTreasuryChestEventFilter
    OpenTreasuryChest(
      chest_id?: null,
      minter?: null,
      token_id?: null,
      amount?: null,
    ): OpenTreasuryChestEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter

    'TransferBatch(address,address,address,uint256[],uint256[])'(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null,
    ): TransferBatchEventFilter
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null,
    ): TransferBatchEventFilter

    'TransferSingle(address,address,address,uint256,uint256)'(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null,
    ): TransferSingleEventFilter
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null,
    ): TransferSingleEventFilter

    'URI(string,uint256)'(
      value?: null,
      id?: BigNumberish | null,
    ): URIEventFilter
    URI(value?: null, id?: BigNumberish | null): URIEventFilter
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    burnBatchItem(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    burnItem(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    grantContractRole(
      _role: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    lockChest(overrides?: CallOverrides): Promise<BigNumber>

    mintItem(
      _minter: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    mintItems(
      _minter: string,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    openChest(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    openChestFee(overrides?: CallOverrides): Promise<BigNumber>

    openChestId(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    revokeContractRole(
      _role: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setBaseUri(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setLockChest(
      _lockChest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    treasury(overrides?: CallOverrides): Promise<BigNumber>

    updateOpenChestFee(
      _baseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    burnBatchItem(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    burnItem(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    grantContractRole(
      _role: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    lockChest(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mintItem(
      _minter: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    mintItems(
      _minter: string,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    openChest(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    openChestFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    openChestId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    revokeContractRole(
      _role: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setBaseUri(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setLockChest(
      _lockChest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>

    updateOpenChestFee(
      _baseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
