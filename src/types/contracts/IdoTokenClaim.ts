/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IdoTokenClaimInterface extends utils.Interface {
  functions: {
    "claimTokens(uint256,uint256,bytes)": FunctionFragment;
    "emergencyWithdraw(address,address,uint256)": FunctionFragment;
    "refund(uint256,bytes)": FunctionFragment;
    "setAdm(address)": FunctionFragment;
    "setConfig(address,address,uint256,uint256,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "checkRefund()": FunctionFragment;
    "claimStartAt()": FunctionFragment;
    "currentClaimRound()": FunctionFragment;
    "idoToken()": FunctionFragment;
    "initialized()": FunctionFragment;
    "isClaimed(address)": FunctionFragment;
    "refundBlockNumber()": FunctionFragment;
    "refundToken()": FunctionFragment;
    "totalClaimed(address)": FunctionFragment;
    "totalRefunded(address)": FunctionFragment;
    "userClaim(address,uint256)": FunctionFragment;
    "userRefund(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setAdm", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkRefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimStartAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentClaimRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "idoToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isClaimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "refundBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRefunded",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userClaim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userRefund", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimStartAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentClaimRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idoToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userRefund", data: BytesLike): Result;

  events: {
    "EventClaimed(address,uint256,uint256)": EventFragment;
    "EventEmergencyWithdraw(address,address,uint256)": EventFragment;
    "EventRefunded(address,uint256,uint256)": EventFragment;
    "EventSetConfig(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventEmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventSetConfig"): EventFragment;
}

export type EventClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipient: string; amount: BigNumber; date: BigNumber }
>;

export type EventClaimedEventFilter = TypedEventFilter<EventClaimedEvent>;

export type EventEmergencyWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  { _token: string; _to: string; _amount: BigNumber }
>;

export type EventEmergencyWithdrawEventFilter =
  TypedEventFilter<EventEmergencyWithdrawEvent>;

export type EventRefundedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipient: string; amount: BigNumber; date: BigNumber }
>;

export type EventRefundedEventFilter = TypedEventFilter<EventRefundedEvent>;

export type EventSetConfigEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    _refundTk: string;
    _idoToken: string;
    _refundBlock: BigNumber;
    _claimTime: BigNumber;
    _claimRound: BigNumber;
  }
>;

export type EventSetConfigEventFilter = TypedEventFilter<EventSetConfigEvent>;

export interface IdoTokenClaim extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IdoTokenClaimInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimTokens(
      _amount: BigNumberish,
      _claimRound: BigNumberish,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      _amount: BigNumberish,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdm(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      _refundTk: string,
      _idoToken: string,
      _refundBlock: BigNumberish,
      _claimTime: BigNumberish,
      _claimRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    checkRefund(overrides?: CallOverrides): Promise<[boolean]>;

    claimStartAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentClaimRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    idoToken(overrides?: CallOverrides): Promise<[string]>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isClaimed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    refundBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundToken(overrides?: CallOverrides): Promise<[string]>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRefunded(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userRefund(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  claimTokens(
    _amount: BigNumberish,
    _claimRound: BigNumberish,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    _amount: BigNumberish,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdm(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    _refundTk: string,
    _idoToken: string,
    _refundBlock: BigNumberish,
    _claimTime: BigNumberish,
    _claimRound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  checkRefund(overrides?: CallOverrides): Promise<boolean>;

  claimStartAt(overrides?: CallOverrides): Promise<BigNumber>;

  currentClaimRound(overrides?: CallOverrides): Promise<BigNumber>;

  idoToken(overrides?: CallOverrides): Promise<string>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  refundBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  refundToken(overrides?: CallOverrides): Promise<string>;

  totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalRefunded(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userClaim(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userRefund(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    claimTokens(
      _amount: BigNumberish,
      _claimRound: BigNumberish,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(
      _amount: BigNumberish,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdm(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    setConfig(
      _refundTk: string,
      _idoToken: string,
      _refundBlock: BigNumberish,
      _claimTime: BigNumberish,
      _claimRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    checkRefund(overrides?: CallOverrides): Promise<boolean>;

    claimStartAt(overrides?: CallOverrides): Promise<BigNumber>;

    currentClaimRound(overrides?: CallOverrides): Promise<BigNumber>;

    idoToken(overrides?: CallOverrides): Promise<string>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    refundBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    refundToken(overrides?: CallOverrides): Promise<string>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalRefunded(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userRefund(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "EventClaimed(address,uint256,uint256)"(
      recipient?: string | null,
      amount?: null,
      date?: null
    ): EventClaimedEventFilter;
    EventClaimed(
      recipient?: string | null,
      amount?: null,
      date?: null
    ): EventClaimedEventFilter;

    "EventEmergencyWithdraw(address,address,uint256)"(
      _token?: null,
      _to?: null,
      _amount?: null
    ): EventEmergencyWithdrawEventFilter;
    EventEmergencyWithdraw(
      _token?: null,
      _to?: null,
      _amount?: null
    ): EventEmergencyWithdrawEventFilter;

    "EventRefunded(address,uint256,uint256)"(
      recipient?: string | null,
      amount?: null,
      date?: null
    ): EventRefundedEventFilter;
    EventRefunded(
      recipient?: string | null,
      amount?: null,
      date?: null
    ): EventRefundedEventFilter;

    "EventSetConfig(address,address,uint256,uint256,uint256)"(
      _refundTk?: null,
      _idoToken?: null,
      _refundBlock?: null,
      _claimTime?: null,
      _claimRound?: null
    ): EventSetConfigEventFilter;
    EventSetConfig(
      _refundTk?: null,
      _idoToken?: null,
      _refundBlock?: null,
      _claimTime?: null,
      _claimRound?: null
    ): EventSetConfigEventFilter;
  };

  estimateGas: {
    claimTokens(
      _amount: BigNumberish,
      _claimRound: BigNumberish,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      _amount: BigNumberish,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdm(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConfig(
      _refundTk: string,
      _idoToken: string,
      _refundBlock: BigNumberish,
      _claimTime: BigNumberish,
      _claimRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    checkRefund(overrides?: CallOverrides): Promise<BigNumber>;

    claimStartAt(overrides?: CallOverrides): Promise<BigNumber>;

    currentClaimRound(overrides?: CallOverrides): Promise<BigNumber>;

    idoToken(overrides?: CallOverrides): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    refundBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    refundToken(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalRefunded(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRefund(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimTokens(
      _amount: BigNumberish,
      _claimRound: BigNumberish,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      _amount: BigNumberish,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdm(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      _refundTk: string,
      _idoToken: string,
      _refundBlock: BigNumberish,
      _claimTime: BigNumberish,
      _claimRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkRefund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimStartAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentClaimRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRefunded(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRefund(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
