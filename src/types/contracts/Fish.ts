/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FishInterface extends utils.Interface {
  functions: {
    "NFTIds(uint256,uint256)": FunctionFragment;
    "basePrice(uint256)": FunctionFragment;
    "configSC(address,address,address,address,address)": FunctionFragment;
    "conversionRate()": FunctionFragment;
    "fee()": FunctionFragment;
    "fishContract()": FunctionFragment;
    "fishTreasuryWallet()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "lfwToken()": FunctionFragment;
    "lfwTreasuryWallet()": FunctionFragment;
    "mintNFT(uint256)": FunctionFragment;
    "mintedFishTokens(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardSC()": FunctionFragment;
    "setBasePrice(uint256,uint256)": FunctionFragment;
    "setConversionRate(uint256)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "swapDiamond(uint256,uint256)": FunctionFragment;
    "totalMintedNFT(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateNftTokenIds(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "NFTIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "basePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configSC",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "conversionRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fishContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fishTreasuryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lfwToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lfwTreasuryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedFishTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardSC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBasePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConversionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapDiamond",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMintedNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNftTokenIds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "NFTIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "basePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configSC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fishContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fishTreasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lfwToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lfwTreasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintedFishTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardSC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMintedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNftTokenIds",
    data: BytesLike
  ): Result;

  events: {
    "ClaimNFT(address,uint256)": EventFragment;
    "ConversionRateChange(uint256)": EventFragment;
    "FeeChange(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapDiamond(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConversionRateChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapDiamond"): EventFragment;
}

export type ClaimNFTEvent = TypedEvent<
  [string, BigNumber],
  { minter: string; FishTokenId: BigNumber }
>;

export type ClaimNFTEventFilter = TypedEventFilter<ClaimNFTEvent>;

export type ConversionRateChangeEvent = TypedEvent<
  [BigNumber],
  { newConversion: BigNumber }
>;

export type ConversionRateChangeEventFilter =
  TypedEventFilter<ConversionRateChangeEvent>;

export type FeeChangeEvent = TypedEvent<[BigNumber], { newFee: BigNumber }>;

export type FeeChangeEventFilter = TypedEventFilter<FeeChangeEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SwapDiamondEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    swapper: string;
    amountInLFW: BigNumber;
    amountInDiamond: BigNumber;
    serverId: BigNumber;
  }
>;

export type SwapDiamondEventFilter = TypedEventFilter<SwapDiamondEvent>;

export interface Fish extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FishInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NFTIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    basePrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    configSC(
      _fishAddress: string,
      _fishTreasuryWallet: string,
      _lfwTreasuryWallet: string,
      _rewardSC: string,
      _lfwToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    conversionRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    fishContract(overrides?: CallOverrides): Promise<[string]>;

    fishTreasuryWallet(overrides?: CallOverrides): Promise<[string]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    lfwToken(overrides?: CallOverrides): Promise<[string]>;

    lfwTreasuryWallet(overrides?: CallOverrides): Promise<[string]>;

    mintNFT(
      _boxNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintedFishTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardSC(overrides?: CallOverrides): Promise<[string]>;

    setBasePrice(
      _boxNumber: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConversionRate(
      _newConversion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapDiamond(
      _amount: BigNumberish,
      _serverId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalMintedNFT(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNftTokenIds(
      _boxNumber: BigNumberish,
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NFTIds(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  basePrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  configSC(
    _fishAddress: string,
    _fishTreasuryWallet: string,
    _lfwTreasuryWallet: string,
    _rewardSC: string,
    _lfwToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  conversionRate(overrides?: CallOverrides): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  fishContract(overrides?: CallOverrides): Promise<string>;

  fishTreasuryWallet(overrides?: CallOverrides): Promise<string>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  lfwToken(overrides?: CallOverrides): Promise<string>;

  lfwTreasuryWallet(overrides?: CallOverrides): Promise<string>;

  mintNFT(
    _boxNumber: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintedFishTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardSC(overrides?: CallOverrides): Promise<string>;

  setBasePrice(
    _boxNumber: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConversionRate(
    _newConversion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapDiamond(
    _amount: BigNumberish,
    _serverId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalMintedNFT(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNftTokenIds(
    _boxNumber: BigNumberish,
    _startId: BigNumberish,
    _endId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NFTIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    basePrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configSC(
      _fishAddress: string,
      _fishTreasuryWallet: string,
      _lfwTreasuryWallet: string,
      _rewardSC: string,
      _lfwToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    conversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    fishContract(overrides?: CallOverrides): Promise<string>;

    fishTreasuryWallet(overrides?: CallOverrides): Promise<string>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    lfwToken(overrides?: CallOverrides): Promise<string>;

    lfwTreasuryWallet(overrides?: CallOverrides): Promise<string>;

    mintNFT(_boxNumber: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mintedFishTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardSC(overrides?: CallOverrides): Promise<string>;

    setBasePrice(
      _boxNumber: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setConversionRate(
      _newConversion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(_newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    swapDiamond(
      _amount: BigNumberish,
      _serverId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalMintedNFT(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNftTokenIds(
      _boxNumber: BigNumberish,
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimNFT(address,uint256)"(
      minter?: string | null,
      FishTokenId?: null
    ): ClaimNFTEventFilter;
    ClaimNFT(minter?: string | null, FishTokenId?: null): ClaimNFTEventFilter;

    "ConversionRateChange(uint256)"(
      newConversion?: null
    ): ConversionRateChangeEventFilter;
    ConversionRateChange(newConversion?: null): ConversionRateChangeEventFilter;

    "FeeChange(uint256)"(newFee?: null): FeeChangeEventFilter;
    FeeChange(newFee?: null): FeeChangeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SwapDiamond(address,uint256,uint256,uint256)"(
      swapper?: string | null,
      amountInLFW?: null,
      amountInDiamond?: null,
      serverId?: null
    ): SwapDiamondEventFilter;
    SwapDiamond(
      swapper?: string | null,
      amountInLFW?: null,
      amountInDiamond?: null,
      serverId?: null
    ): SwapDiamondEventFilter;
  };

  estimateGas: {
    NFTIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    basePrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configSC(
      _fishAddress: string,
      _fishTreasuryWallet: string,
      _lfwTreasuryWallet: string,
      _rewardSC: string,
      _lfwToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    conversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    fishContract(overrides?: CallOverrides): Promise<BigNumber>;

    fishTreasuryWallet(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    lfwToken(overrides?: CallOverrides): Promise<BigNumber>;

    lfwTreasuryWallet(overrides?: CallOverrides): Promise<BigNumber>;

    mintNFT(
      _boxNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintedFishTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardSC(overrides?: CallOverrides): Promise<BigNumber>;

    setBasePrice(
      _boxNumber: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConversionRate(
      _newConversion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapDiamond(
      _amount: BigNumberish,
      _serverId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalMintedNFT(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNftTokenIds(
      _boxNumber: BigNumberish,
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NFTIds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    basePrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configSC(
      _fishAddress: string,
      _fishTreasuryWallet: string,
      _lfwTreasuryWallet: string,
      _rewardSC: string,
      _lfwToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    conversionRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fishContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fishTreasuryWallet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lfwToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lfwTreasuryWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintNFT(
      _boxNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintedFishTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardSC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBasePrice(
      _boxNumber: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConversionRate(
      _newConversion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapDiamond(
      _amount: BigNumberish,
      _serverId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalMintedNFT(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNftTokenIds(
      _boxNumber: BigNumberish,
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
