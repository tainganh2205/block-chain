/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "BSCStaion_CASTLE_FACTORY()": FunctionFragment;
    "PRECISION_FACTOR(address)": FunctionFragment;
    "accTokenPerShare(address)": FunctionFragment;
    "addRewardToken(address,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bonusEndBlock()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "emergencyRemoval(uint256)": FunctionFragment;
    "emergencyRewardWithdraw(uint256)": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "feePeriod()": FunctionFragment;
    "getAllAccTokenPerShared(address[])": FunctionFragment;
    "getAllPreFactor(address[])": FunctionFragment;
    "getAllRewardPerBlock(address[])": FunctionFragment;
    "getFeeCollector()": FunctionFragment;
    "getFeePeriod()": FunctionFragment;
    "getLastStakingBlock(address)": FunctionFragment;
    "getStakingEndBlock()": FunctionFragment;
    "getUnStakingFee()": FunctionFragment;
    "getUnlockTime()": FunctionFragment;
    "getUserDebt(address)": FunctionFragment;
    "getUserDebtByToken(address,address)": FunctionFragment;
    "hasPoolLimit()": FunctionFragment;
    "hasUserLimit()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address[],uint256[],uint256[],uint256[],uint256,uint256[],address,uint256,uint256,bool,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "lastRewardBlock()": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(address)": FunctionFragment;
    "pendingRewardByToken(address,address)": FunctionFragment;
    "poolCap()": FunctionFragment;
    "poolLimitPerUser()": FunctionFragment;
    "recoverWrongTokens(address,uint256)": FunctionFragment;
    "removeRewardToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerBlock(address)": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "stakedToken()": FunctionFragment;
    "stakingBlock()": FunctionFragment;
    "stakingEndBlock()": FunctionFragment;
    "startBlock()": FunctionFragment;
    "stopReward()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unStakingBlock()": FunctionFragment;
    "unStakingFee()": FunctionFragment;
    "unlock()": FunctionFragment;
    "updateFeeCollector(address)": FunctionFragment;
    "updateFeePeriod(uint256)": FunctionFragment;
    "updatePoolCap(bool,uint256)": FunctionFragment;
    "updatePoolLimitPerUser(bool,uint256)": FunctionFragment;
    "updateRewardPerBlock(uint256,address)": FunctionFragment;
    "updateStakingBlocks(uint256,uint256)": FunctionFragment;
    "updateStartAndEndBlocks(uint256,uint256)": FunctionFragment;
    "updateUnStakingBlock(uint256)": FunctionFragment;
    "updateUnstakingFee(uint256)": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BSCStaion_CASTLE_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRECISION_FACTOR",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "accTokenPerShare",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bonusEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRemoval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRewardWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feePeriod", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllAccTokenPerShared",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPreFactor",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRewardPerBlock",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastStakingBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnStakingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getUserDebt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserDebtByToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPoolLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewardByToken",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "poolCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolLimitPerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverWrongTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unStakingBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unStakingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolCap",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolLimitPerUser",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardPerBlock",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakingBlocks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStartAndEndBlocks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnStakingBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnstakingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BSCStaion_CASTLE_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accTokenPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRemoval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRewardWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllAccTokenPerShared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPreFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastStakingBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnStakingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDebtByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPoolLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewardByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolLimitPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverWrongTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unStakingBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unStakingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolLimitPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakingBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStartAndEndBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnStakingBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnstakingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminTokenRecovery(address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256)": EventFragment;
    "NewPoolCap(uint256)": EventFragment;
    "NewPoolLimit(uint256)": EventFragment;
    "NewRewardPerBlock(uint256,address)": EventFragment;
    "NewRewardToken(address,uint256,uint256)": EventFragment;
    "NewStakingBlocks(uint256,uint256)": EventFragment;
    "NewStartAndEndBlocks(uint256,uint256)": EventFragment;
    "NewUnStakingBlock(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveRewardToken(address)": EventFragment;
    "RewardsStop(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminTokenRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPoolCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPoolLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRewardPerBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRewardToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStakingBlocks"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStartAndEndBlocks"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewUnStakingBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveRewardToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsStop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AdminTokenRecoveryEvent = TypedEvent<
  [string, BigNumber],
  { tokenRecovered: string; amount: BigNumber }
>;

export type AdminTokenRecoveryEventFilter =
  TypedEventFilter<AdminTokenRecoveryEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export type NewPoolCapEvent = TypedEvent<[BigNumber], { poolCap: BigNumber }>;

export type NewPoolCapEventFilter = TypedEventFilter<NewPoolCapEvent>;

export type NewPoolLimitEvent = TypedEvent<
  [BigNumber],
  { poolLimitPerUser: BigNumber }
>;

export type NewPoolLimitEventFilter = TypedEventFilter<NewPoolLimitEvent>;

export type NewRewardPerBlockEvent = TypedEvent<
  [BigNumber, string],
  { rewardPerBlock: BigNumber; token: string }
>;

export type NewRewardPerBlockEventFilter =
  TypedEventFilter<NewRewardPerBlockEvent>;

export type NewRewardTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { token: string; rewardPerBlock: BigNumber; p_factor: BigNumber }
>;

export type NewRewardTokenEventFilter = TypedEventFilter<NewRewardTokenEvent>;

export type NewStakingBlocksEvent = TypedEvent<
  [BigNumber, BigNumber],
  { startStakingBlock: BigNumber; endStakingBlock: BigNumber }
>;

export type NewStakingBlocksEventFilter =
  TypedEventFilter<NewStakingBlocksEvent>;

export type NewStartAndEndBlocksEvent = TypedEvent<
  [BigNumber, BigNumber],
  { startBlock: BigNumber; endBlock: BigNumber }
>;

export type NewStartAndEndBlocksEventFilter =
  TypedEventFilter<NewStartAndEndBlocksEvent>;

export type NewUnStakingBlockEvent = TypedEvent<
  [BigNumber],
  { startUnStakingBlock: BigNumber }
>;

export type NewUnStakingBlockEventFilter =
  TypedEventFilter<NewUnStakingBlockEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RemoveRewardTokenEvent = TypedEvent<[string], { token: string }>;

export type RemoveRewardTokenEventFilter =
  TypedEventFilter<RemoveRewardTokenEvent>;

export type RewardsStopEvent = TypedEvent<
  [BigNumber],
  { blockNumber: BigNumber }
>;

export type RewardsStopEventFilter = TypedEventFilter<RewardsStopEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BSCStaion_CASTLE_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    PRECISION_FACTOR(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    accTokenPerShare(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addRewardToken(
      _token: string,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bonusEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyRemoval(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    feePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllAccTokenPerShared(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAllPreFactor(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAllRewardPerBlock(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    getFeePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastStakingBlock(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakingEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnStakingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserDebt(
      _usr: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getUserDebtByToken(
      _usr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasPoolLimit(overrides?: CallOverrides): Promise<[boolean]>;

    hasUserLimit(overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _stakedToken: string,
      _rewardTokens: string[],
      _rewardPerBlock: BigNumberish[],
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _feeSettings: BigNumberish[],
      _feeCollector: string,
      _poolLimitPerUser: BigNumberish,
      _poolCap: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    lastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    lock(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[]]>;

    pendingRewardByToken(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolLimitPerUser(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakedToken(overrides?: CallOverrides): Promise<[string]>;

    stakingBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    stopReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unStakingBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    unStakingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeePeriod(
      _newFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolCap(
      _hasPoolLimit: boolean,
      _poolCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolLimitPerUser(
      _hasUserLimit: boolean,
      _poolLimitPerUser: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStakingBlocks(
      _startStakingBlock: BigNumberish,
      _endStakingBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUnStakingBlock(
      _startUnStakingBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUnstakingFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount: BigNumber;
        lastStakingBlock: BigNumber;
      }
    >;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BSCStaion_CASTLE_FACTORY(overrides?: CallOverrides): Promise<string>;

  PRECISION_FACTOR(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  accTokenPerShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  addRewardToken(
    _token: string,
    _rewardPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyRemoval(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyRewardWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  feePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getAllAccTokenPerShared(
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAllPreFactor(
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAllRewardPerBlock(
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getFeeCollector(overrides?: CallOverrides): Promise<string>;

  getFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getLastStakingBlock(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getUnStakingFee(overrides?: CallOverrides): Promise<BigNumber>;

  getUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  getUserDebt(
    _usr: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getUserDebtByToken(
    _usr: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasPoolLimit(overrides?: CallOverrides): Promise<boolean>;

  hasUserLimit(overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _stakedToken: string,
    _rewardTokens: string[],
    _rewardPerBlock: BigNumberish[],
    _startEndBlocks: BigNumberish[],
    _stakingBlocks: BigNumberish[],
    _unStakingBlock: BigNumberish,
    _feeSettings: BigNumberish[],
    _feeCollector: string,
    _poolLimitPerUser: BigNumberish,
    _poolCap: BigNumberish,
    _isRemovable: boolean,
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lock(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], string[]]>;

  pendingRewardByToken(
    _user: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolCap(overrides?: CallOverrides): Promise<BigNumber>;

  poolLimitPerUser(overrides?: CallOverrides): Promise<BigNumber>;

  recoverWrongTokens(
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRewardToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  stakedToken(overrides?: CallOverrides): Promise<string>;

  stakingBlock(overrides?: CallOverrides): Promise<BigNumber>;

  stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  stopReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unStakingBlock(overrides?: CallOverrides): Promise<BigNumber>;

  unStakingFee(overrides?: CallOverrides): Promise<BigNumber>;

  unlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeCollector(
    _newCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeePeriod(
    _newFeePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolCap(
    _hasPoolLimit: boolean,
    _poolCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolLimitPerUser(
    _hasUserLimit: boolean,
    _poolLimitPerUser: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardPerBlock(
    _rewardPerBlock: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStakingBlocks(
    _startStakingBlock: BigNumberish,
    _endStakingBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStartAndEndBlocks(
    _startBlock: BigNumberish,
    _bonusEndBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUnStakingBlock(
    _startUnStakingBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUnstakingFee(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; lastStakingBlock: BigNumber }
  >;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BSCStaion_CASTLE_FACTORY(overrides?: CallOverrides): Promise<string>;

    PRECISION_FACTOR(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accTokenPerShare(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addRewardToken(
      _token: string,
      _rewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    emergencyRemoval(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    feePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getAllAccTokenPerShared(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAllPreFactor(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAllRewardPerBlock(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getFeeCollector(overrides?: CallOverrides): Promise<string>;

    getFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getLastStakingBlock(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getUnStakingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDebt(
      _usr: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getUserDebtByToken(
      _usr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPoolLimit(overrides?: CallOverrides): Promise<boolean>;

    hasUserLimit(overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _stakedToken: string,
      _rewardTokens: string[],
      _rewardPerBlock: BigNumberish[],
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _feeSettings: BigNumberish[],
      _feeCollector: string,
      _poolLimitPerUser: BigNumberish,
      _poolCap: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lock(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[]]>;

    pendingRewardByToken(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCap(overrides?: CallOverrides): Promise<BigNumber>;

    poolLimitPerUser(overrides?: CallOverrides): Promise<BigNumber>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRewardToken(_token: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPerBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    stakedToken(overrides?: CallOverrides): Promise<string>;

    stakingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    stopReward(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unStakingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    unStakingFee(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(overrides?: CallOverrides): Promise<void>;

    updateFeeCollector(
      _newCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeePeriod(
      _newFeePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolCap(
      _hasPoolLimit: boolean,
      _poolCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolLimitPerUser(
      _hasUserLimit: boolean,
      _poolLimitPerUser: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStakingBlocks(
      _startStakingBlock: BigNumberish,
      _endStakingBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUnStakingBlock(
      _startUnStakingBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUnstakingFee(
      _newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount: BigNumber;
        lastStakingBlock: BigNumber;
      }
    >;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminTokenRecovery(address,uint256)"(
      tokenRecovered?: null,
      amount?: null
    ): AdminTokenRecoveryEventFilter;
    AdminTokenRecovery(
      tokenRecovered?: null,
      amount?: null
    ): AdminTokenRecoveryEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Deposit(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(user?: string | null, amount?: null): DepositEventFilter;

    "EmergencyWithdraw(address,uint256)"(
      user?: string | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: string | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "NewPoolCap(uint256)"(poolCap?: null): NewPoolCapEventFilter;
    NewPoolCap(poolCap?: null): NewPoolCapEventFilter;

    "NewPoolLimit(uint256)"(poolLimitPerUser?: null): NewPoolLimitEventFilter;
    NewPoolLimit(poolLimitPerUser?: null): NewPoolLimitEventFilter;

    "NewRewardPerBlock(uint256,address)"(
      rewardPerBlock?: null,
      token?: null
    ): NewRewardPerBlockEventFilter;
    NewRewardPerBlock(
      rewardPerBlock?: null,
      token?: null
    ): NewRewardPerBlockEventFilter;

    "NewRewardToken(address,uint256,uint256)"(
      token?: null,
      rewardPerBlock?: null,
      p_factor?: null
    ): NewRewardTokenEventFilter;
    NewRewardToken(
      token?: null,
      rewardPerBlock?: null,
      p_factor?: null
    ): NewRewardTokenEventFilter;

    "NewStakingBlocks(uint256,uint256)"(
      startStakingBlock?: null,
      endStakingBlock?: null
    ): NewStakingBlocksEventFilter;
    NewStakingBlocks(
      startStakingBlock?: null,
      endStakingBlock?: null
    ): NewStakingBlocksEventFilter;

    "NewStartAndEndBlocks(uint256,uint256)"(
      startBlock?: null,
      endBlock?: null
    ): NewStartAndEndBlocksEventFilter;
    NewStartAndEndBlocks(
      startBlock?: null,
      endBlock?: null
    ): NewStartAndEndBlocksEventFilter;

    "NewUnStakingBlock(uint256)"(
      startUnStakingBlock?: null
    ): NewUnStakingBlockEventFilter;
    NewUnStakingBlock(startUnStakingBlock?: null): NewUnStakingBlockEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemoveRewardToken(address)"(token?: null): RemoveRewardTokenEventFilter;
    RemoveRewardToken(token?: null): RemoveRewardTokenEventFilter;

    "RewardsStop(uint256)"(blockNumber?: null): RewardsStopEventFilter;
    RewardsStop(blockNumber?: null): RewardsStopEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdraw(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    BSCStaion_CASTLE_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accTokenPerShare(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addRewardToken(
      _token: string,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyRemoval(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    feePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getAllAccTokenPerShared(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPreFactor(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllRewardPerBlock(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getLastStakingBlock(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getUnStakingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDebt(_usr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserDebtByToken(
      _usr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPoolLimit(overrides?: CallOverrides): Promise<BigNumber>;

    hasUserLimit(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _stakedToken: string,
      _rewardTokens: string[],
      _rewardPerBlock: BigNumberish[],
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _feeSettings: BigNumberish[],
      _feeCollector: string,
      _poolLimitPerUser: BigNumberish,
      _poolCap: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewardByToken(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCap(overrides?: CallOverrides): Promise<BigNumber>;

    poolLimitPerUser(overrides?: CallOverrides): Promise<BigNumber>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    stopReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unStakingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    unStakingFee(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeePeriod(
      _newFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolCap(
      _hasPoolLimit: boolean,
      _poolCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolLimitPerUser(
      _hasUserLimit: boolean,
      _poolLimitPerUser: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStakingBlocks(
      _startStakingBlock: BigNumberish,
      _endStakingBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUnStakingBlock(
      _startUnStakingBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUnstakingFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BSCStaion_CASTLE_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISION_FACTOR(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accTokenPerShare(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addRewardToken(
      _token: string,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonusEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyRemoval(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllAccTokenPerShared(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPreFactor(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllRewardPerBlock(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastStakingBlock(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingEndBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnStakingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserDebt(
      _usr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDebtByToken(
      _usr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPoolLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasUserLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _stakedToken: string,
      _rewardTokens: string[],
      _rewardPerBlock: BigNumberish[],
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _feeSettings: BigNumberish[],
      _feeCollector: string,
      _poolLimitPerUser: BigNumberish,
      _poolCap: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingRewardByToken(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLimitPerUser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverWrongTokens(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRewardToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unStakingBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unStakingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeePeriod(
      _newFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolCap(
      _hasPoolLimit: boolean,
      _poolCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolLimitPerUser(
      _hasUserLimit: boolean,
      _poolLimitPerUser: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStakingBlocks(
      _startStakingBlock: BigNumberish,
      _endStakingBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStartAndEndBlocks(
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUnStakingBlock(
      _startUnStakingBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUnstakingFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
