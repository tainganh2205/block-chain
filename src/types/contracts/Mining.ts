/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common'

export interface MiningInterface extends ethers.utils.Interface {
  functions: {
    'LFW_CASTLE_FACTORY()': FunctionFragment
    'OPERATOR_WALLET()': FunctionFragment
    'addOperatorWallet(address)': FunctionFragment
    'addWhitelistAddress(address,uint256)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'bonusEndBlock()': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'depositChest(address,uint256[],uint256[])': FunctionFragment
    'depositLFW(uint256)': FunctionFragment
    'depositNFT(address,uint256)': FunctionFragment
    'emergencyChestWithdraw(address,uint256[],uint256[])': FunctionFragment
    'emergencyLFWWithdraw(uint256)': FunctionFragment
    'emergencyNFTWithdraw(address,uint256)': FunctionFragment
    'getCurrentBlock()': FunctionFragment
    'getNFTIds(address,uint256)': FunctionFragment
    'getNumberDeposit(address)': FunctionFragment
    'getStatusChest(address,uint256)': FunctionFragment
    'getStatusLFW(address,uint256)': FunctionFragment
    'getStatusNFT(address,uint256)': FunctionFragment
    'getUserRemainingBlockForReward(address,uint256)': FunctionFragment
    'getWhitelist(address,uint256)': FunctionFragment
    'getWhitelistedTokenID(address,uint256)': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(address,uint256[],uint256[],uint256,bool,address)': FunctionFragment
    'isInitialized()': FunctionFragment
    'isPoolClosed()': FunctionFragment
    'lastRewardBlock()': FunctionFragment
    'lfwToken()': FunctionFragment
    'name()': FunctionFragment
    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)': FunctionFragment
    'onERC1155Received(address,address,uint256,uint256,bytes)': FunctionFragment
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment
    'owner()': FunctionFragment
    'removeWhitelistNFT(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'stakingBlock()': FunctionFragment
    'stakingEndBlock()': FunctionFragment
    'startBlock()': FunctionFragment
    'stopPool()': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unStakingBlock()': FunctionFragment
    'userInfo(address)': FunctionFragment
    'userList(uint256)': FunctionFragment
    'whitelistAddress(address)': FunctionFragment
    'whitelistNFT(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'LFW_CASTLE_FACTORY',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'OPERATOR_WALLET',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'addOperatorWallet',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'addWhitelistAddress',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string],
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'bonusEndBlock',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'depositChest',
    values: [string, BigNumberish[], BigNumberish[]],
  ): string
  encodeFunctionData(
    functionFragment: 'depositLFW',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'depositNFT',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyChestWithdraw',
    values: [string, BigNumberish[], BigNumberish[]],
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyLFWWithdraw',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyNFTWithdraw',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentBlock',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getNFTIds',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getNumberDeposit',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'getStatusChest',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getStatusLFW',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getStatusNFT',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getUserRemainingBlockForReward',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getWhitelist',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getWhitelistedTokenID',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      boolean,
      string,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'isInitialized',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'isPoolClosed',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'lastRewardBlock',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'lfwToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'onERC1155BatchReceived',
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'onERC1155Received',
    values: [string, string, BigNumberish, BigNumberish, BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [string, string, BigNumberish, BytesLike],
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removeWhitelistNFT',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'stakingBlock',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'stakingEndBlock',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'startBlock', values?: undefined): string
  encodeFunctionData(functionFragment: 'stopPool', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'unStakingBlock',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'userInfo', values: [string]): string
  encodeFunctionData(
    functionFragment: 'userList',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'whitelistAddress',
    values: [string],
  ): string
  encodeFunctionData(functionFragment: 'whitelistNFT', values: [string]): string

  decodeFunctionResult(
    functionFragment: 'LFW_CASTLE_FACTORY',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'OPERATOR_WALLET',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'addOperatorWallet',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'addWhitelistAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'bonusEndBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositChest',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'depositLFW', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositNFT', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'emergencyChestWithdraw',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyLFWWithdraw',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyNFTWithdraw',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCurrentBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'getNFTIds', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getNumberDeposit',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStatusChest',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStatusLFW',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStatusNFT',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUserRemainingBlockForReward',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getWhitelist',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getWhitelistedTokenID',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isInitialized',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'isPoolClosed',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'lastRewardBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'lfwToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'onERC1155BatchReceived',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'onERC1155Received',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'onERC721Received',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeWhitelistNFT',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'stakingBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'stakingEndBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'startBlock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stopPool', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'unStakingBlock',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'userList', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'whitelistAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'whitelistNFT',
    data: BytesLike,
  ): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'DepositChest(address,address,uint256,uint256)': EventFragment
    'DepositLFW(address,uint256)': EventFragment
    'DepositNFT(address,address,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositChest'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositLFW'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositNFT'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export type DepositChestEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { owner: string; nftAddress: string; tokenId: BigNumber; amount: BigNumber }
>

export type DepositChestEventFilter = TypedEventFilter<DepositChestEvent>

export type DepositLFWEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>

export type DepositLFWEventFilter = TypedEventFilter<DepositLFWEvent>

export type DepositNFTEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; nftAddress: string; tokenId: BigNumber }
>

export type DepositNFTEventFilter = TypedEventFilter<DepositNFTEvent>

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface Mining extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: MiningInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    LFW_CASTLE_FACTORY(overrides?: CallOverrides): Promise<[string]>

    OPERATOR_WALLET(overrides?: CallOverrides): Promise<[string]>

    addOperatorWallet(
      operatorWallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    addWhitelistAddress(
      _addresses: string,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    bonusEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    decimals(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    depositChest(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    depositLFW(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    depositNFT(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    emergencyChestWithdraw(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    emergencyLFWWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    emergencyNFTWithdraw(
      nftAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    getCurrentBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    getNFTIds(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getNumberDeposit(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getStatusChest(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getStatusLFW(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getStatusNFT(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getUserRemainingBlockForReward(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getWhitelist(
      user_: string,
      tokenID_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getWhitelistedTokenID(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    initialize(
      lfwToken_: string,
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>

    isPoolClosed(overrides?: CallOverrides): Promise<[boolean]>

    lastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    lfwToken(overrides?: CallOverrides): Promise<[string]>

    name(overrides?: CallOverrides): Promise<[string]>

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    removeWhitelistNFT(
      _usr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    stakingBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    stakingEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    stopPool(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    unStakingBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        totalAmountLFW: BigNumber
        totalAmountNFT: BigNumber
        totalAmountChest: BigNumber
        noOfDepositLFW: BigNumber
        noOfDepositNFT: BigNumber
        noOfDepositChest: BigNumber
        noOfAddWhitelistNFT: BigNumber
      }
    >

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    whitelistAddress(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    whitelistNFT(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>
  }

  LFW_CASTLE_FACTORY(overrides?: CallOverrides): Promise<string>

  OPERATOR_WALLET(overrides?: CallOverrides): Promise<string>

  addOperatorWallet(
    operatorWallet_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  addWhitelistAddress(
    _addresses: string,
    tokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  depositChest(
    nftAddress: string,
    tokenId: BigNumberish[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  depositLFW(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  depositNFT(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  emergencyChestWithdraw(
    nftAddress: string,
    tokenId: BigNumberish[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  emergencyLFWWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  emergencyNFTWithdraw(
    nftAddress: string,
    nftTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  getCurrentBlock(overrides?: CallOverrides): Promise<BigNumber>

  getNFTIds(
    _usr: string,
    index_: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getNumberDeposit(_usr: string, overrides?: CallOverrides): Promise<BigNumber>

  getStatusChest(
    _usr: string,
    index_: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getStatusLFW(
    _usr: string,
    index_: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getStatusNFT(
    _usr: string,
    index_: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getUserRemainingBlockForReward(
    _usr: string,
    index_: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getWhitelist(
    user_: string,
    tokenID_: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getWhitelistedTokenID(
    _usr: string,
    index_: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  initialize(
    lfwToken_: string,
    _startEndBlocks: BigNumberish[],
    _stakingBlocks: BigNumberish[],
    _unStakingBlock: BigNumberish,
    _isRemovable: boolean,
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  isInitialized(overrides?: CallOverrides): Promise<boolean>

  isPoolClosed(overrides?: CallOverrides): Promise<boolean>

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>

  lfwToken(overrides?: CallOverrides): Promise<string>

  name(overrides?: CallOverrides): Promise<string>

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  removeWhitelistNFT(
    _usr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  stakingBlock(overrides?: CallOverrides): Promise<BigNumber>

  stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>

  startBlock(overrides?: CallOverrides): Promise<BigNumber>

  stopPool(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  unStakingBlock(overrides?: CallOverrides): Promise<BigNumber>

  userInfo(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
    ] & {
      totalAmountLFW: BigNumber
      totalAmountNFT: BigNumber
      totalAmountChest: BigNumber
      noOfDepositLFW: BigNumber
      noOfDepositNFT: BigNumber
      noOfDepositChest: BigNumber
      noOfAddWhitelistNFT: BigNumber
    }
  >

  userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  whitelistAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  whitelistNFT(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    LFW_CASTLE_FACTORY(overrides?: CallOverrides): Promise<string>

    OPERATOR_WALLET(overrides?: CallOverrides): Promise<string>

    addOperatorWallet(
      operatorWallet_: string,
      overrides?: CallOverrides,
    ): Promise<void>

    addWhitelistAddress(
      _addresses: string,
      tokenID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    depositChest(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>

    depositLFW(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    depositNFT(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    emergencyChestWithdraw(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>

    emergencyLFWWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    emergencyNFTWithdraw(
      nftAddress: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    getCurrentBlock(overrides?: CallOverrides): Promise<BigNumber>

    getNFTIds(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getNumberDeposit(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStatusChest(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStatusLFW(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStatusNFT(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserRemainingBlockForReward(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getWhitelist(
      user_: string,
      tokenID_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getWhitelistedTokenID(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    initialize(
      lfwToken_: string,
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: CallOverrides,
    ): Promise<void>

    isInitialized(overrides?: CallOverrides): Promise<boolean>

    isPoolClosed(overrides?: CallOverrides): Promise<boolean>

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>

    lfwToken(overrides?: CallOverrides): Promise<string>

    name(overrides?: CallOverrides): Promise<string>

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    removeWhitelistNFT(_usr: string, overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    stakingBlock(overrides?: CallOverrides): Promise<BigNumber>

    stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>

    startBlock(overrides?: CallOverrides): Promise<BigNumber>

    stopPool(overrides?: CallOverrides): Promise<void>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>

    unStakingBlock(overrides?: CallOverrides): Promise<BigNumber>

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        totalAmountLFW: BigNumber
        totalAmountNFT: BigNumber
        totalAmountChest: BigNumber
        noOfDepositLFW: BigNumber
        noOfDepositNFT: BigNumber
        noOfDepositChest: BigNumber
        noOfAddWhitelistNFT: BigNumber
      }
    >

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    whitelistAddress(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    whitelistNFT(arg0: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter

    'DepositChest(address,address,uint256,uint256)'(
      owner?: string | null,
      nftAddress?: string | null,
      tokenId?: null,
      amount?: null,
    ): DepositChestEventFilter
    DepositChest(
      owner?: string | null,
      nftAddress?: string | null,
      tokenId?: null,
      amount?: null,
    ): DepositChestEventFilter

    'DepositLFW(address,uint256)'(
      user?: string | null,
      amount?: null,
    ): DepositLFWEventFilter
    DepositLFW(user?: string | null, amount?: null): DepositLFWEventFilter

    'DepositNFT(address,address,uint256)'(
      owner?: string | null,
      nftAddress?: string | null,
      tokenId?: null,
    ): DepositNFTEventFilter
    DepositNFT(
      owner?: string | null,
      nftAddress?: string | null,
      tokenId?: null,
    ): DepositNFTEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter
  }

  estimateGas: {
    LFW_CASTLE_FACTORY(overrides?: CallOverrides): Promise<BigNumber>

    OPERATOR_WALLET(overrides?: CallOverrides): Promise<BigNumber>

    addOperatorWallet(
      operatorWallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    addWhitelistAddress(
      _addresses: string,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    depositChest(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    depositLFW(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    depositNFT(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    emergencyChestWithdraw(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    emergencyLFWWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    emergencyNFTWithdraw(
      nftAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    getCurrentBlock(overrides?: CallOverrides): Promise<BigNumber>

    getNFTIds(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getNumberDeposit(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStatusChest(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStatusLFW(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStatusNFT(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserRemainingBlockForReward(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getWhitelist(
      user_: string,
      tokenID_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getWhitelistedTokenID(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    initialize(
      lfwToken_: string,
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>

    isPoolClosed(overrides?: CallOverrides): Promise<BigNumber>

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>

    lfwToken(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    removeWhitelistNFT(
      _usr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    stakingBlock(overrides?: CallOverrides): Promise<BigNumber>

    stakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>

    startBlock(overrides?: CallOverrides): Promise<BigNumber>

    stopPool(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    unStakingBlock(overrides?: CallOverrides): Promise<BigNumber>

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    whitelistAddress(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    whitelistNFT(arg0: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    LFW_CASTLE_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>

    OPERATOR_WALLET(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addOperatorWallet(
      operatorWallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    addWhitelistAddress(
      _addresses: string,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    bonusEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    depositChest(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    depositLFW(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    depositNFT(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    emergencyChestWithdraw(
      nftAddress: string,
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    emergencyLFWWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    emergencyNFTWithdraw(
      nftAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    getCurrentBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getNFTIds(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getNumberDeposit(
      _usr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getStatusChest(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getStatusLFW(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getStatusNFT(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUserRemainingBlockForReward(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getWhitelist(
      user_: string,
      tokenID_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getWhitelistedTokenID(
      _usr: string,
      index_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    initialize(
      lfwToken_: string,
      _startEndBlocks: BigNumberish[],
      _stakingBlocks: BigNumberish[],
      _unStakingBlock: BigNumberish,
      _isRemovable: boolean,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isPoolClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    lfwToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeWhitelistNFT(
      _usr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    stakingBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stakingEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stopPool(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    unStakingBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    userList(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    whitelistAddress(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    whitelistNFT(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
