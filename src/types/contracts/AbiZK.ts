/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type UserStruct = { totalTokenClaim: BigNumberish };

export type UserStructOutput = [BigNumber] & { totalTokenClaim: BigNumber };

export interface AbiZKInterface extends utils.Interface {
  functions: {
    "address_admin()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "dayOpen()": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "orderCount()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendTransferReward(address,uint256)": FunctionFragment;
    "sendTransferRewardToAdmin()": FunctionFragment;
    "setAddressAdmin(address)": FunctionFragment;
    "setTokenClaim(address)": FunctionFragment;
    "tokenClaim()": FunctionFragment;
    "totalBNBDeposit()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userIdsOrders(address)": FunctionFragment;
    "users(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "address_admin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "dayOpen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "orderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTransferReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTransferRewardToAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenClaim",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBNBDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userIdsOrders",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "address_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dayOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendTransferReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendTransferRewardToAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddressAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBNBDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userIdsOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { sender: string; receiver: string; amount: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface AbiZK extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbiZKInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    address_admin(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dayOpen(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUser(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<[UserStructOutput]>;

    orderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        userId: string;
        createdDate: BigNumber;
        amountBNB: BigNumber;
        amountBSCS: BigNumber;
        amountBSCSBlock: BigNumber;
        nextMonth: BigNumber;
        numWithDraw: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendTransferReward(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendTransferRewardToAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddressAdmin(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenClaim(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenClaim(overrides?: CallOverrides): Promise<[string]>;

    totalBNBDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userIdsOrders(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalTokenClaim: BigNumber }>;
  };

  address_admin(overrides?: CallOverrides): Promise<string>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dayOpen(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getUser(_adr: string, overrides?: CallOverrides): Promise<UserStructOutput>;

  orderCount(overrides?: CallOverrides): Promise<BigNumber>;

  orders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      id: BigNumber;
      userId: string;
      createdDate: BigNumber;
      amountBNB: BigNumber;
      amountBSCS: BigNumber;
      amountBSCSBlock: BigNumber;
      nextMonth: BigNumber;
      numWithDraw: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendTransferReward(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendTransferRewardToAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddressAdmin(
    _adr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenClaim(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenClaim(overrides?: CallOverrides): Promise<string>;

  totalBNBDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userIdsOrders(arg0: string, overrides?: CallOverrides): Promise<string>;

  users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    address_admin(overrides?: CallOverrides): Promise<string>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    dayOpen(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(_adr: string, overrides?: CallOverrides): Promise<UserStructOutput>;

    orderCount(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        userId: string;
        createdDate: BigNumber;
        amountBNB: BigNumber;
        amountBSCS: BigNumber;
        amountBSCSBlock: BigNumber;
        nextMonth: BigNumber;
        numWithDraw: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendTransferReward(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendTransferRewardToAdmin(overrides?: CallOverrides): Promise<void>;

    setAddressAdmin(_adr: string, overrides?: CallOverrides): Promise<void>;

    setTokenClaim(_token: string, overrides?: CallOverrides): Promise<void>;

    tokenClaim(overrides?: CallOverrides): Promise<string>;

    totalBNBDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userIdsOrders(arg0: string, overrides?: CallOverrides): Promise<string>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Deposit(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(user?: string | null, amount?: null): DepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      sender?: null,
      receiver?: null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      sender?: null,
      receiver?: null,
      amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    address_admin(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dayOpen(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    orderCount(overrides?: CallOverrides): Promise<BigNumber>;

    orders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendTransferReward(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendTransferRewardToAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddressAdmin(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenClaim(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenClaim(overrides?: CallOverrides): Promise<BigNumber>;

    totalBNBDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userIdsOrders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    address_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dayOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUser(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendTransferReward(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendTransferRewardToAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddressAdmin(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenClaim(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBNBDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userIdsOrders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
